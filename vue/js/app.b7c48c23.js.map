{"version":3,"file":"js/app.b7c48c23.js","mappings":"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","sources":["webpack://othello-vue/./src/App.vue","webpack://othello-vue/../../othello-model/lib/othello_core/othello_rules.js","webpack://othello-vue/../../othello-model/lib/othello_core/othello_core.js","webpack://othello-vue/../../othello-model/lib/othello_core/othello_env.js","webpack://othello-vue/../../othello-model/lib/othello_framework/othello_framework.js","webpack://othello-vue/../../othello-model/lib/othello_core/othello_facade.js","webpack://othello-vue/../../othello-model/lib/othello_framework/othello_action.js","webpack://othello-vue/./src/App.vue?7ccd","webpack://othello-vue/./src/main.js","webpack://othello-vue/webpack/bootstrap","webpack://othello-vue/webpack/runtime/chunk loaded","webpack://othello-vue/webpack/runtime/compat get default export","webpack://othello-vue/webpack/runtime/define property getters","webpack://othello-vue/webpack/runtime/global","webpack://othello-vue/webpack/runtime/hasOwnProperty shorthand","webpack://othello-vue/webpack/runtime/jsonp chunk loading","webpack://othello-vue/webpack/startup"],"sourcesContent":["<template>\n  <div>\n    <div class=\"controls\">\n      <select v-model=\"selectedType\" @change=\"onOthelloTypeChange\">\n        <option v-for=\"type in gameRules.values()\" :key=\"type.descript\" :value=\"type.descript\">\n          {{ type.descript }}\n        </option>\n      </select>\n      <input\n        v-if=\"selectedType === gameRules.getDefaultCustomType().descript\"\n        type=\"number\"\n        :value=\"gameAction.information.getType().cols\"\n        @input=\"onCustomSizeChange\"\n        :min=\"gameRules.minSize\"\n        placeholder=\"Board Size\"\n      />\n    </div>\n    <div class=\"board-description\">\n      <p>Board Size: {{ getBoardSizeDescription(gameAction) }}</p>\n      <label>\n        Simulation Placement:\n        <input type=\"checkbox\" v-model=\"customPlacement\" @change=\"onCustomPlacementChange\" />\n      </label>\n      <select v-if=\"customPlacement\" v-model=\"selectedPiece\" @change=\"onPieceSelectionChange\">\n        <option value=\"black\">Black</option>\n        <option value=\"white\">White</option>\n      </select>\n    </div>\n    <div class=\"board\" :style=\"gridTemplateStyle\">\n      <div v-for=\"(row, rowIndex) in board\" :key=\"rowIndex\" class=\"row\">\n        <div\n          v-for=\"(cell, colIndex) in row\"\n          :key=\"colIndex\"\n          :class=\"getCellClassName(cell)\"\n          @click=\"onCellClick(rowIndex, colIndex)\"\n        ></div>\n      </div>\n    </div>\n    <div class=\"info\">\n      <p>Current Player: {{ currentPlayerEmoji }}</p>\n      <p>Black: {{ counts.black }}</p>\n      <p>White: {{ counts.white }}</p>\n    </div>\n    <button @click=\"onReset\">Reset</button>\n  </div>\n</template>\n<script>\nimport { Piece, Player } from 'othello-model/lib/othello_core';\nimport { OthelloError, OthelloGameTotalEvent } from 'othello-model/lib/othello_framework';\n\nexport default {\n  data() {\n    const onError = (error) => { alert(`Error: ${OthelloError[error]}`); };\n    const onGameOver = (winner) => {\n      if (winner == null) { alert(\"Game Over! Both sides draw\"); return; }\n      const winner_str = winner === Player.BLACK_PLAYER ? \"Black\" : \"White\";\n      alert(`Game Over! Winner: ${winner_str}`);\n    };\n    const onBoardChange = (boardData) => {\n      this.board = [...boardData.board];\n      this.counts = boardData.counts;\n    };\n    const onRestarted = () => { this.customPlacement = false; };\n\n    const game = new OthelloGameTotalEvent(onRestarted, onError, onGameOver, onBoardChange);\n    const gameRules = game.rules;\n    const gameAction = game.action;\n\n    return {\n      game,\n      gameRules,\n      gameAction,\n      board: gameAction.information.getBoard(),\n      counts: gameAction.information.getPieceCounts(),\n      selectedType: gameAction.information.getType().descript,\n      customPlacement: false,\n      selectedPiece: Piece.BLACK,\n    };\n  },\n  computed: {\n    gridTemplateStyle() {\n      const cols = this.board?.[0]?.length || 0;\n      return {\n        gridTemplateRows: `repeat(${this.board.length}, 1fr)`,\n        gridTemplateColumns: `repeat(${cols}, 1fr)`,\n      };\n    },\n    // 👇 用這個給模板顯示 emoji\n    currentPlayerEmoji() {\n      const cur = this.gameAction?.information?.getCurrentPlayer?.();\n      if (cur === Player.BLACK_PLAYER) return '⚫ Black';\n      if (cur === Player.WHITE_PLAYER) return '⚪ White';\n      return ''; // 初始/異常時不顯示\n    },\n  },\n  methods: {\n    onCellClick(row, col) { this.gameAction.putPiece({ row, col }); },\n    onReset() { this.gameAction.resetGame(); },\n    onOthelloTypeChange(event) {\n      const selectedDescription = event.target.value;\n      const selectedType =\n        this.gameRules.values().find((t) => t.descript === selectedDescription)\n        || this.gameRules.getDefaultCustomType();\n      this.selectedType = selectedType.descript;\n      this.gameAction.setType(selectedType);\n    },\n    onCustomSizeChange(event) {\n      const size = parseInt(event.target.value, 10);\n      this.gameAction.setType(this.gameRules.createCustomOthelloType(size));\n    },\n    getBoardSizeDescription(gameAction) {\n      const type = gameAction.information.getType();\n      return `${type.rows} x ${type.cols}`;\n    },\n    getCellClassName(cell) {\n      return `cell ${cell === Piece.BLACK ? 'black' : cell === Piece.WHITE ? 'white' : ''}`;\n    },\n    onCustomPlacementChange(event) {\n      const isSelected = event.target.checked;\n      this.customPlacement = isSelected;\n      this.gameAction.customerBoard.setCustomBoard(isSelected);\n    },\n    onPieceSelectionChange(event) {\n      this.selectedPiece = event.target.value === 'black' ? Piece.BLACK : Piece.WHITE;\n      const player = event.target.value === 'black' ? Player.BLACK_PLAYER : Player.WHITE_PLAYER;\n      this.gameAction.customerBoard.setCurrentPlayer(player);\n    },\n  },\n};\n</script>\n\n\n<style scoped>\n.board {\n  display: grid;\n  border: 1px solid black;\n  width: 400px; \n  height: 400px;\n}\n\n.row {\n  display: contents;\n}\n\n.cell {\n  background-color: green;\n  border: 1px solid black;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.black {\n  background-color: black;\n}\n\n.white {\n  background-color: white;\n}\n</style>\n\n\n","export var Player;\n(function (Player) {\n    Player[\"BLACK_PLAYER\"] = \"black_player\";\n    Player[\"WHITE_PLAYER\"] = \"white_player\";\n})(Player || (Player = {}));\nexport var Piece;\n(function (Piece) {\n    Piece[Piece[\"BLACK\"] = 0] = \"BLACK\";\n    Piece[Piece[\"WHITE\"] = 1] = \"WHITE\";\n})(Piece || (Piece = {}));\nexport class OthelloType {\n    constructor(len, descript) {\n        this.rows = len;\n        this.cols = len;\n        this.descript = descript;\n    }\n}\nOthelloType.SmallBoard = new OthelloType(6, \"Small Board\");\nOthelloType.Classic = new OthelloType(8, \"Classic\");\nOthelloType.LargeBoard = new OthelloType(12, \"Large Board\");\nOthelloType.Custom = new OthelloType(4, 'Custom');\nexport class DefaultOthelloRule {\n    constructor() {\n        this.minSize = 2;\n    }\n    isIllegalSize(size) {\n        return isNaN(size) || size % 2 !== 0 || size <= this.minSize;\n    }\n    values() {\n        return [\n            OthelloType.Classic,\n            OthelloType.LargeBoard,\n            OthelloType.SmallBoard,\n            OthelloType.Custom,\n        ];\n    }\n    getDefaultCustomType() {\n        return OthelloType.Custom;\n    }\n    createCustomOthelloType(size) {\n        return new OthelloType(size, OthelloType.Custom.descript);\n    }\n}\n","import { Player, Piece } from './othello_rules';\nexport function getOthelloCore(rows, cols) {\n    return new DefaultOthelloCore(rows, cols);\n}\nconst directions = [\n    [-1, 0], [1, 0], [0, -1], [0, 1],\n    [-1, -1], [-1, 1], [1, -1], [1, 1]\n];\nclass DefaultOthelloCore {\n    constructor(rows, cols) {\n        this.rows = rows;\n        this.cols = cols;\n    }\n    isLegalMove(row, col, board, player) {\n        if (!this.isPlaceable(row, col, board)) {\n            return false;\n        }\n        const piece = player === Player.BLACK_PLAYER ? Piece.BLACK : Piece.WHITE;\n        const opponent = player === Player.BLACK_PLAYER ? Piece.WHITE : Piece.BLACK;\n        return directions.some(([dx, dy]) => {\n            let x = row + dx;\n            let y = col + dy;\n            let hasOpponentPiece = false;\n            while (x >= 0 && x < this.rows && y >= 0 && y < this.cols && board[x][y] === opponent) {\n                hasOpponentPiece = true;\n                x += dx;\n                y += dy;\n            }\n            return hasOpponentPiece && x >= 0 && x < this.rows && y >= 0 && y < this.cols && board[x][y] === piece;\n        });\n    }\n    playerMoveableCounts(player, board) {\n        let counts = 0;\n        for (let row = 0; row < board.length; row++) {\n            for (let col = 0; col < board[row].length; col++) {\n                if (this.isLegalMove(row, col, board, player)) {\n                    counts += 1;\n                }\n            }\n        }\n        return counts;\n    }\n    isPlaceable(row, col, board) {\n        return board[row][col] === null;\n    }\n    getFlippableDiscs(player, row, col, board) {\n        const opponentPiece = player === Player.BLACK_PLAYER ? Piece.WHITE : Piece.BLACK;\n        let flippableDiscs = [];\n        for (let [dx, dy] of directions) {\n            let x = row + dx, y = col + dy;\n            let potentialFlips = [];\n            while (x >= 0 && x < this.rows && y >= 0 && y < this.cols && board[x][y] === opponentPiece) {\n                potentialFlips.push([x, y]);\n                x += dx;\n                y += dy;\n            }\n            if (x >= 0 && x < this.rows && y >= 0 && y < this.cols && board[x][y] === (player === Player.BLACK_PLAYER ? Piece.BLACK : Piece.WHITE)) {\n                flippableDiscs = flippableDiscs.concat(potentialFlips);\n            }\n        }\n        return flippableDiscs;\n    }\n    putPiece(player, row, col, board) {\n        if (!this.isPlaceable(row, col, board)) {\n            return false;\n        }\n        const flippableDiscs = this.getFlippableDiscs(player, row, col, board);\n        if (flippableDiscs.length === 0) {\n            return false;\n        }\n        board[row][col] = player === Player.BLACK_PLAYER ? Piece.BLACK : Piece.WHITE;\n        for (let [x, y] of flippableDiscs) {\n            board[x][y] = player === Player.BLACK_PLAYER ? Piece.BLACK : Piece.WHITE;\n        }\n        return true;\n    }\n}\n","import { Player, Piece } from './othello_rules';\nimport { getOthelloCore } from './othello_core';\nexport var BoardResult;\n(function (BoardResult) {\n    BoardResult[BoardResult[\"PUT_SUCCESS\"] = 0] = \"PUT_SUCCESS\";\n    BoardResult[BoardResult[\"PUT_SUCCESS_KEEP_PUT\"] = 1] = \"PUT_SUCCESS_KEEP_PUT\";\n    BoardResult[BoardResult[\"PUT_FAIL\"] = 2] = \"PUT_FAIL\";\n    BoardResult[BoardResult[\"PUT_FAIL_EXCHANGE_PLAYER\"] = 3] = \"PUT_FAIL_EXCHANGE_PLAYER\";\n})(BoardResult || (BoardResult = {}));\nexport class CustomerOthelloEnv {\n    constructor(controller) {\n        this.controller = controller;\n        this.currentPlayer = controller.currentPlayer;\n    }\n    getBoard() {\n        return this.controller.getBoard();\n    }\n    getPieceCounts() {\n        return this.controller.getPieceCounts();\n    }\n    putPiece(params) {\n        const { row, col } = params;\n        this.controller.getBoard()[row][col] = this.currentPlayer === Player.BLACK_PLAYER ? Piece.BLACK : Piece.WHITE;\n        ;\n        return BoardResult.PUT_SUCCESS;\n    }\n    isGameOver() {\n        return false;\n    }\n}\nexport class BattleOthelloEnv {\n    constructor(othelloType, board) {\n        this.othelloCore = getOthelloCore(othelloType.rows, othelloType.cols);\n        this.currentPlayer = Player.BLACK_PLAYER;\n        if (board != null) {\n            this.board = board;\n            return;\n        }\n        this.board = Array(othelloType.rows)\n            .fill(null)\n            .map(() => Array(othelloType.cols).fill(null));\n        const midRow = Math.floor(othelloType.rows / 2);\n        const midCol = Math.floor(othelloType.cols / 2);\n        this.board[midRow - 1][midCol - 1] = Piece.WHITE;\n        this.board[midRow - 1][midCol] = Piece.BLACK;\n        this.board[midRow][midCol - 1] = Piece.BLACK;\n        this.board[midRow][midCol] = Piece.WHITE;\n    }\n    getBoard() {\n        return this.board;\n    }\n    isGameOver() {\n        const opponent = this.currentPlayer === Player.BLACK_PLAYER ? Player.WHITE_PLAYER : Player.BLACK_PLAYER;\n        return this.othelloCore.playerMoveableCounts(this.currentPlayer, this.board) <= 0 &&\n            this.othelloCore.playerMoveableCounts(opponent, this.board) <= 0;\n    }\n    convertPlayer() {\n        this.currentPlayer = this.currentPlayer === Player.BLACK_PLAYER ? Player.WHITE_PLAYER : Player.BLACK_PLAYER;\n    }\n    getPieceCounts() {\n        let black = 0, white = 0;\n        for (let row of this.board) {\n            for (let cell of row) {\n                switch (cell) {\n                    case Piece.BLACK:\n                        black++;\n                        break;\n                    case Piece.WHITE:\n                        white++;\n                        break;\n                }\n            }\n        }\n        return { black, white };\n    }\n    putPiece(params) {\n        const { row, col } = params;\n        const isPutSuccess = this.othelloCore.putPiece(this.currentPlayer, row, col, this.board);\n        const opponent = this.currentPlayer === Player.BLACK_PLAYER ? Player.WHITE_PLAYER : Player.BLACK_PLAYER;\n        const selfPutableCounts = this.othelloCore.playerMoveableCounts(this.currentPlayer, this.board);\n        const opponentPutableCounts = this.othelloCore.playerMoveableCounts(opponent, this.board);\n        console.log(`${this.currentPlayer} putable counts ${selfPutableCounts}, opponent putable counts ${opponentPutableCounts}`);\n        if (!isPutSuccess) {\n            if (selfPutableCounts === 0 && opponentPutableCounts > 0) {\n                this.convertPlayer();\n                return BoardResult.PUT_FAIL_EXCHANGE_PLAYER;\n            }\n            return BoardResult.PUT_FAIL;\n        }\n        console.log(`${this.currentPlayer} put success.\\n`);\n        if (selfPutableCounts > 0 && opponentPutableCounts === 0) {\n            return BoardResult.PUT_SUCCESS_KEEP_PUT;\n        }\n        this.convertPlayer();\n        return BoardResult.PUT_SUCCESS;\n    }\n}\n","import { DefaultOthelloRule } from '../othello_core';\nimport { getOthelloAction } from './othello_action';\nexport var OthelloError;\n(function (OthelloError) {\n    OthelloError[OthelloError[\"ILLEGAL_PLACE\"] = 0] = \"ILLEGAL_PLACE\";\n    OthelloError[OthelloError[\"ILLEGAL_CUSTOM\"] = 1] = \"ILLEGAL_CUSTOM\";\n    OthelloError[OthelloError[\"EXCHANGE_PLAYER\"] = 2] = \"EXCHANGE_PLAYER\";\n    OthelloError[OthelloError[\"KEEP_PUTTING\"] = 3] = \"KEEP_PUTTING\";\n})(OthelloError || (OthelloError = {}));\nexport class DefaultOthelloActivity {\n    constructor() {\n        this.rules = new DefaultOthelloRule();\n        this.action = getOthelloAction(this.rules, this);\n    }\n}\nexport class OthelloGameTotalEvent extends DefaultOthelloActivity {\n    constructor(onRestartedCallback, onErrorCallback, onGameOverCallback, onBoardChangeCallback) {\n        super();\n        this.onRestartedCallback = onRestartedCallback;\n        this.onErrorCallback = onErrorCallback;\n        this.onGameOverCallback = onGameOverCallback;\n        this.onBoardChangeCallback = onBoardChangeCallback;\n    }\n    onError(error) {\n        this.onErrorCallback(error);\n    }\n    onRestarted() {\n        this.onRestartedCallback();\n    }\n    onGameOver(winner) {\n        this.onGameOverCallback(winner);\n    }\n    onBoardChange(boardData) {\n        this.onBoardChangeCallback(boardData);\n    }\n}\nexport function createOthelloGame(onRestarted, onError, onGameOver, onBoardChange) {\n    const game = new OthelloGameTotalEvent(onRestarted, onError, onGameOver, onBoardChange);\n    return {\n        rules: game.rules,\n        action: game.action,\n        getBoard: () => game.action.information.getBoard(),\n        getCounts: () => game.action.information.getPieceCounts(),\n        getCurrentPlayer: () => game.action.information.getCurrentPlayer(),\n        setType: (type) => game.action.setType(type),\n        putPiece: (params) => game.action.putPiece(params),\n        resetGame: () => game.action.resetGame(),\n    };\n}\n","import { BattleOthelloEnv, CustomerOthelloEnv } from './othello_env';\nimport { OthelloType } from './othello_rules';\nexport function getOthelloFacade() {\n    return new DefaultOthelloFacade();\n}\nclass DefaultOthelloFacade {\n    constructor() {\n        this.othelloType = OthelloType.Classic;\n        this.othelloController = new BattleOthelloEnv(this.othelloType, null);\n    }\n    setCurrentPlayer(player) {\n        this.othelloController.currentPlayer = player;\n    }\n    setCustomBoard(enable) {\n        let cachePlayer = this.othelloController.currentPlayer;\n        if (enable) {\n            this.othelloController = new CustomerOthelloEnv(this.othelloController);\n        }\n        else {\n            this.othelloController = new BattleOthelloEnv(this.othelloType, this.othelloController.getBoard());\n        }\n        this.othelloController.currentPlayer = cachePlayer;\n    }\n    setType(type) {\n        this.othelloType = type;\n        this.resetGame();\n    }\n    resetGame() {\n        this.othelloController = new BattleOthelloEnv(this.othelloType, null);\n    }\n    isGameOver() {\n        return this.othelloController.isGameOver();\n    }\n    putPiece(params) {\n        return this.othelloController.putPiece(params);\n    }\n    getStatus() {\n        return {\n            type: this.othelloType,\n            currentPlayer: this.othelloController.currentPlayer,\n        };\n    }\n    getBoardData() {\n        return {\n            counts: this.othelloController.getPieceCounts(),\n            board: this.othelloController.getBoard().map(row => row.slice())\n        };\n    }\n}\n","import { OthelloError } from './othello_framework';\nimport { getOthelloFacade, Player } from '../othello_core';\nimport { BoardResult } from '../othello_core/othello_env';\nexport function getOthelloAction(rule, callback) {\n    return new DefaultOthelloAction(rule, callback);\n}\nclass DefaultOthelloAction {\n    constructor(rule, callback) {\n        this.othello = getOthelloFacade();\n        this.information = {\n            getCurrentPlayer: () => {\n                return this.othello.getStatus().currentPlayer;\n            },\n            getType: () => {\n                return this.othello.getStatus().type;\n            },\n            getPieceCounts: () => {\n                return this.othello.getBoardData().counts;\n            },\n            getBoard: () => {\n                return this.othello.getBoardData().board;\n            },\n        };\n        this.customerBoard = this.othello;\n        this.rule = rule;\n        this.callback = callback;\n    }\n    setType(type) {\n        if (this.rule.isIllegalSize(type.rows)) {\n            this.callback.onError(OthelloError.ILLEGAL_CUSTOM);\n            return;\n        }\n        this.othello.setType(type);\n        this.resetGame();\n    }\n    putPiece(params) {\n        const putResult = this.othello.putPiece(params);\n        const boardData = this.othello.getBoardData();\n        const winner = this.getWinner(boardData.counts);\n        switch (putResult) {\n            case BoardResult.PUT_SUCCESS:\n                this.callback.onBoardChange(boardData);\n                if (this.othello.isGameOver()) {\n                    this.callback.onGameOver(winner);\n                }\n                break;\n            case BoardResult.PUT_SUCCESS_KEEP_PUT:\n                this.callback.onError(OthelloError.KEEP_PUTTING);\n                this.callback.onBoardChange(boardData);\n                if (this.othello.isGameOver()) {\n                    this.callback.onGameOver(winner);\n                }\n                break;\n            case BoardResult.PUT_FAIL:\n            case BoardResult.PUT_FAIL_EXCHANGE_PLAYER:\n                if (this.othello.isGameOver()) {\n                    this.callback.onBoardChange(boardData);\n                    this.callback.onGameOver(winner);\n                    return;\n                }\n                const errorType = putResult == BoardResult.PUT_FAIL_EXCHANGE_PLAYER ? OthelloError.EXCHANGE_PLAYER : OthelloError.ILLEGAL_PLACE;\n                this.callback.onError(errorType);\n                break;\n        }\n    }\n    getWinner(counts) {\n        if (counts.black === counts.white) {\n            return null;\n        }\n        return counts.black > counts.white ? Player.BLACK_PLAYER : Player.WHITE_PLAYER;\n    }\n    resetGame() {\n        this.othello.resetGame();\n        this.callback.onRestarted();\n        const boardData = this.othello.getBoardData();\n        this.callback.onBoardChange(boardData);\n    }\n}\n","import { render } from \"./App.vue?vue&type=template&id=308abd0b&scoped=true\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=308abd0b&scoped=true&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-308abd0b\"]])\n\nexport default __exports__","import { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkothello_vue\"] = self[\"webpackChunkothello_vue\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(7858); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["class","_createElementBlock","_createElementVNode","_hoisted_1","$data","selectedType","$event","onChange","_cache","args","$options","onOthelloTypeChange","_Fragment","_renderList","gameRules","values","type","key","descript","value","_hoisted_2","getDefaultCustomType","gameAction","information","getType","cols","onInput","onCustomSizeChange","min","minSize","placeholder","_hoisted_4","_toDisplayString","getBoardSizeDescription","customPlacement","onCustomPlacementChange","selectedPiece","onPieceSelectionChange","style","_normalizeStyle","gridTemplateStyle","board","row","rowIndex","cell","colIndex","_normalizeClass","getCellClassName","onClick","onCellClick","_hoisted_6","currentPlayerEmoji","counts","black","white","onReset","Player","Piece","OthelloType","constructor","len","this","rows","SmallBoard","Classic","LargeBoard","Custom","DefaultOthelloRule","isIllegalSize","size","isNaN","createCustomOthelloType","getOthelloCore","DefaultOthelloCore","directions","isLegalMove","col","player","isPlaceable","piece","BLACK_PLAYER","BLACK","WHITE","opponent","some","dx","dy","x","y","hasOpponentPiece","playerMoveableCounts","length","getFlippableDiscs","opponentPiece","flippableDiscs","potentialFlips","push","concat","putPiece","BoardResult","OthelloError","CustomerOthelloEnv","controller","currentPlayer","getBoard","getPieceCounts","params","PUT_SUCCESS","isGameOver","BattleOthelloEnv","othelloType","othelloCore","Array","fill","map","midRow","Math","floor","midCol","WHITE_PLAYER","convertPlayer","isPutSuccess","selfPutableCounts","opponentPutableCounts","console","log","PUT_SUCCESS_KEEP_PUT","PUT_FAIL_EXCHANGE_PLAYER","PUT_FAIL","getOthelloFacade","DefaultOthelloFacade","othelloController","setCurrentPlayer","setCustomBoard","enable","cachePlayer","setType","resetGame","getStatus","getBoardData","slice","getOthelloAction","rule","callback","DefaultOthelloAction","othello","getCurrentPlayer","customerBoard","onError","ILLEGAL_CUSTOM","putResult","boardData","winner","getWinner","onBoardChange","onGameOver","KEEP_PUTTING","errorType","EXCHANGE_PLAYER","ILLEGAL_PLACE","onRestarted","DefaultOthelloActivity","rules","action","OthelloGameTotalEvent","onRestartedCallback","onErrorCallback","onGameOverCallback","onBoardChangeCallback","super","error","data","alert","winner_str","game","computed","gridTemplateRows","gridTemplateColumns","cur","methods","event","selectedDescription","target","find","t","parseInt","isSelected","checked","__exports__","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","id","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}